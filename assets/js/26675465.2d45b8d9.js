"use strict";(self.webpackChunkapi_wiki=self.webpackChunkapi_wiki||[]).push([[334],{2264:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>t,default:()=>a,frontMatter:()=>d,metadata:()=>c,toc:()=>o});var i=n(4848),r=n(8453);const d={},t="Descriptive API Spec",c={id:"Descriptive API Contract/descriptive_wiki",title:"Descriptive API Spec",description:"API Contract Details:",source:"@site/docs/Descriptive API Contract/descriptive_wiki.md",sourceDirName:"Descriptive API Contract",slug:"/Descriptive API Contract/descriptive_wiki",permalink:"/githubActions/docs/Descriptive API Contract/descriptive_wiki",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tutorial Intro",permalink:"/githubActions/docs/intro"},next:{title:"JSON API Spec",permalink:"/githubActions/docs/Json API Contract/json_wiki"}},l={},o=[{value:"API Contract Details:",id:"api-contract-details",level:2},{value:"Endpoints:",id:"endpoints",level:3},{value:"<code>/users</code>",id:"users",level:4},{value:"Definitions:",id:"definitions",level:2},{value:"Descriptive Wiki:",id:"descriptive-wiki",level:2},{value:"GET",id:"get",level:4}];function h(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"descriptive-api-spec",children:"Descriptive API Spec"}),"\n",(0,i.jsx)(s.h2,{id:"api-contract-details",children:"API Contract Details:"}),"\n",(0,i.jsxs)(s.p,{children:["The API contract contains one endpoint, ",(0,i.jsx)(s.code,{children:"/users"}),", which is used to manage user data. It supports the following methods: GET, POST, PUT, and DELETE. The endpoint requires authentication and authorization, and has rate limiting enabled."]}),"\n",(0,i.jsx)(s.h3,{id:"endpoints",children:"Endpoints:"}),"\n",(0,i.jsx)(s.h4,{id:"users",children:(0,i.jsx)(s.code,{children:"/users"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"})," Endpoint to manage user data."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Methods:"})," GET, POST, PUT, DELETE"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Request Formats:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"GET:"})," Retrieve user data by ID. Parameters:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"id"})," (string, required): The ID of the user to retrieve."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"POST:"})," Create a new user. Body:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"name"})," (string, required): The name of the user to create."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"email"})," (string, required): The email address of the user to create."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"password"})," (string, required): The password of the user to create."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"PUT:"})," Update an existing user. Parameters:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"id"})," (string, required): The ID of the user to update.\r\nBody:"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"name"})," (string, optional): The new name of the user."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"email"})," (string, optional): The new email address of the user."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"password"})," (string, optional): The new password of the user."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"DELETE:"})," Delete a user by ID. Parameters:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"id"})," (string, required): The ID of the user to delete."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Response Formats:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"GET:"})," Return user data by ID. Responses:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"200"}),": User data. Properties:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"id"})," (string): The ID of the user."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"name"})," (string): The name of the user."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"email"})," (string): The email address of the user."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"404"}),": User not found. Properties:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"message"})," (string): A message describing the error."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"POST:"})," Create a new user. Responses:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"201"}),": User created successfully. Properties:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"id"})," (string): The ID of the new user."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"message"})," (string): A message describing the success."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"400"}),": Bad request. Properties:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"message"})," (string): A message describing the error."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"PUT:"})," Update an existing user. Responses:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"200"}),": User updated successfully. Properties:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"message"})," (string): A message describing the success."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"404"}),": User not found. Properties:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"message"})," (string): A message describing the error."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"DELETE:"})," Delete a user by ID. Responses:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"200"}),": User deleted successfully. Properties:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"message"})," (string): A message describing the success."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"404"}),": User not found. Properties:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"message"})," (string): A message describing the error."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Error Handling:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"400"}),": Bad request - Missing or invalid parameters."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"401"}),": Unauthorized - Authentication required."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"404"}),": Not found - Resource not found."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"500"}),": Internal server error - Something went wrong on our end."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Authentication:"})," True"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Authorization:"})," True"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Rate Limiting:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"limit"}),": 100 requests per hour."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"interval"}),": Hour."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"message"}),": Rate limit exceeded, please try again later."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"definitions",children:"Definitions:"}),"\n",(0,i.jsx)(s.p,{children:"There are no definitions or data models used in the API contract."}),"\n",(0,i.jsx)(s.h2,{id:"descriptive-wiki",children:"Descriptive Wiki:"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"/users"})," endpoint is used to manage user data. It supports the following methods: GET, POST, PUT, and DELETE."]}),"\n",(0,i.jsx)(s.h4,{id:"get",children:"GET"}),"\n",(0,i.jsxs)(s.p,{children:["To retrieve user data by ID, make a GET request to ",(0,i.jsx)(s.code,{children:"/users"})," with the ",(0,i.jsx)(s.code,{children:"id"})," parameter set to the ID of the user to retrieve. If the user is found, the endpoint will return a ",(0,i.jsx)(s.code,{children:"200"})," response with the user data. If the user is not found, the endpoint will return a"]})]})}function a(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>c});var i=n(6540);const r={},d=i.createContext(r);function t(e){const s=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(d.Provider,{value:s},e.children)}}}]);